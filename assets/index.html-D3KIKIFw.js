import{_ as e,o as a,c as n,e as s}from"./app-C8q1F3U4.js";const t={},p=s('<h1 id="规则引擎概述" tabindex="-1"><a class="header-anchor" href="#规则引擎概述"><span>规则引擎概述</span></a></h1><h2 id="_1、什么是规则引擎" tabindex="-1"><a class="header-anchor" href="#_1、什么是规则引擎"><span>1、什么是规则引擎</span></a></h2><p><strong>规则引擎</strong>，全称为<strong>业务规则引擎系统</strong> ，英文名为BRMS（即Business Rule Management System）。规则引擎的主要思想是将应用程序中的业务决策部分分离出来，并使用预定义的语义模块编写业务决策（业务规则），由用户或开发者在需要时进行配置、管理。</p><p>需要注意的是规则引擎并不是一个具体的技术框架，而是指一类系统，即业务规则管理系统。目前市面上具体的规则引擎产品有：drools、VisualRules、iLog等。</p><p>规则引擎实现了将业务决策从应用程序代码中分离出来，接收数据输入，解释业务规则，并根据业务规则做出业务决策。规则引擎其实就是一个输入输出平台。</p><h2 id="_2、使用规则引擎的优势" tabindex="-1"><a class="header-anchor" href="#_2、使用规则引擎的优势"><span>2、使用规则引擎的优势</span></a></h2><p>使用规则引擎的优势如下：</p><p>1、业务规则与系统代码分离，实现业务规则的多集中管理</p><p>2、在不重启服务的情况下，可随时对业务规则进行扩展和维护</p><p>3、可以动态修改业务规则，从而快速响应需求变更</p><p>4、规则引擎是相对独立的，只关心业务规则，使得业务分析人员也可以参与编辑、维护系统的业务规则</p><p>5、减少了硬编码业务规则额度成本和风险</p><p>6、使用规则引擎提供的多规则编辑工具，使复杂的业务规则实现变得简单</p><h2 id="_3、规则引擎应用场景" tabindex="-1"><a class="header-anchor" href="#_3、规则引擎应用场景"><span>3、规则引擎应用场景</span></a></h2><p>对于一些存在比较复杂的业务规则，并且业务规则会频繁变动的系统比较适合使用规则引擎，如下：</p><p>1、风险控制系统——风险贷款、风险评估</p><p>2、反欺诈项目——银行贷款、征信验证</p><p>3、决策平台系统——财务计算</p><p>4、促销平台系统——满减、打折、加价购</p>',19),l=[p];function r(i,c){return a(),n("div",null,l)}const d=e(t,[["render",r],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/back-end/rule-engine/","title":"规则引擎概述","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、什么是规则引擎","slug":"_1、什么是规则引擎","link":"#_1、什么是规则引擎","children":[]},{"level":2,"title":"2、使用规则引擎的优势","slug":"_2、使用规则引擎的优势","link":"#_2、使用规则引擎的优势","children":[]},{"level":2,"title":"3、规则引擎应用场景","slug":"_3、规则引擎应用场景","link":"#_3、规则引擎应用场景","children":[]}],"git":{"updatedTime":1712506298000},"filePathRelative":"back-end/rule-engine/README.md"}');export{d as comp,o as data};
