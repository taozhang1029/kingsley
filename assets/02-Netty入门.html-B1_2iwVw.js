import{_ as u,r as p,o as k,c as r,a as n,b as s,d as a,w as t,e as o}from"./app-C8q1F3U4.js";const d="/blog/assets/19-DjudAkp7.png",m="/blog/assets/20-C9nmsGvS.png",v="/blog/assets/21-C7h4pZcj.png",b="/blog/assets/22-jTVPEuhQ.png",h="/blog/assets/clientCnnfig-Dw3hu83V.png",y={},g=o('<h1 id="netty入门" tabindex="-1"><a class="header-anchor" href="#netty入门"><span>Netty入门</span></a></h1><h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span>一、概述</span></a></h2><h3 id="_1、netty-是什么" tabindex="-1"><a class="header-anchor" href="#_1、netty-是什么"><span>1、Netty 是什么？</span></a></h3><blockquote><p>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.</p></blockquote><p>Netty 是一个<strong>异步</strong>的、<strong>基于事件驱动</strong>的<strong>网络应用框架</strong>，用于快速开发可维护、高性能的网络服务器和客户端。</p><blockquote><p>底层基于 NIO ，所以 Netty 运行在 JVM 上。</p></blockquote><h3 id="_2、netty-的作者" tabindex="-1"><a class="header-anchor" href="#_2、netty-的作者"><span>2、Netty 的作者</span></a></h3><p><img src="'+d+'" alt=""></p>',8),f={href:"https://mina.apache.org/mina-project/quick-start-guide.html",target:"_blank",rel:"noopener noreferrer"},w=o(`<h3 id="_3、netty-的地位" tabindex="-1"><a class="header-anchor" href="#_3、netty-的地位"><span>3、Netty 的地位</span></a></h3><p>Netty 在 Java 网络应用框架中的地位就好比：Spring 框架在 JavaEE 开发中的地位</p><p>以下的框架都使用了 Netty，因为它们有网络通信需求！</p><ul><li>Cassandra - nosql 数据库</li><li>Spark - 大数据分布式计算框架</li><li>Hadoop - 大数据分布式存储框架</li><li>RocketMQ - ali 开源的消息队列</li><li>ElasticSearch - 搜索引擎</li><li>gRPC - rpc 框架</li><li>Dubbo - rpc 框架</li><li>Spring 5.x - flux api 完全抛弃了 tomcat ，使用 netty 作为服务器端</li><li>Zookeeper - 分布式协调框架</li></ul><h3 id="_4、netty-的优势" tabindex="-1"><a class="header-anchor" href="#_4、netty-的优势"><span>4、Netty 的优势</span></a></h3><ul><li>Netty vs NIO，工作量大，bug 多 <ul><li>需要自己构建协议</li><li>解决 TCP 传输问题，如粘包、半包</li><li>epoll 空轮询导致 CPU 100%</li><li>对 API 进行增强，使之更易用，如 FastThreadLocal =&gt; ThreadLocal，ByteBuf =&gt; ByteBuffer</li></ul></li><li>Netty vs 其它网络应用框架 <ul><li>Mina 由 apache 维护，将来 3.x 版本可能会有较大重构，破坏 API 向下兼容性，Netty 的开发迭代更迅速，API 更简洁、文档更优秀</li><li>久经考验，16年，Netty 版本 <ul><li>2.x 2004</li><li>3.x 2008</li><li>4.x 2013</li><li>5.x 已废弃（没有明显的性能提升，维护成本高）</li></ul></li></ul></li></ul><h2 id="二、快速入门" tabindex="-1"><a class="header-anchor" href="#二、快速入门"><span>二、快速入门</span></a></h2><h3 id="_1、目标" tabindex="-1"><a class="header-anchor" href="#_1、目标"><span>1、目标</span></a></h3><p>开发一个简单的服务器端和客户端</p><ul><li>客户端向服务器端发送 hello, world</li><li>服务器仅接收，不返回</li></ul><p>加入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.1.59.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、服务器端" tabindex="-1"><a class="header-anchor" href="#_2、服务器端"><span>2、服务器端</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">ServerBootstrap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelHandlerContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInboundHandlerAdapter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioServerSocketChannel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span></span><span class="token class-name">StringDecoder</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * netty服务端
 *
 * <span class="token keyword">@author</span> kingsley
 * <span class="token keyword">@date</span> 2024/4/7 21:41
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServer</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、启动器，负责组装netty组件，启动服务器</span>
        <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">/*
                 * 2、创建 NioEventLoopGroup，可以简单理解为 BossEventLoop 和 WorkerEventLoop(selector, thread)
                 * NioEventLoopGroup 包含 BossEventLoop 和 WorkerEventLoop，可简单理解为NIO基础中学到的 Boss 和 Worker
                 * WorkerEventLoop中有最重要的两部分：selector，线程。
                 *  - selector：用于监听客户端连接、处理网络事件（可读、可写）；
                 *  - thread：处理具体的网络事件，充分利用CPU
                 */</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">/*
                 * 3、选择服务器的ServerSocketChannel实现
                 *  - NioServerSocketChannel：NIO
                 *  - OioServerSocketChannel：BIO
                 * 在启动时会反射调用NioServerSocketChannel的构造方法，创建对象
                 */</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token comment">/*
                 * 4、boss负责处理连接，worker（child）负责处理读写，决定了worker能执行哪些操作（handler）
                 */</span>
                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span>
                        <span class="token comment">/*
                         * 5、添加和客户端进行数据读写的通道的初始化器，它本身是一个特殊的handler，它的作用是管理一系列的handler，可以理解为拦截器
                         * 该方法不会立即执行初始化操作，而是等待连接建立后才会执行初始化
                         */</span>
                        <span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token annotation punctuation">@Override</span>
                            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token comment">/*
                                 * 6、添加具体的handler
                                 *  - StringDecoder：将接收到的ByteBuf转换为字符串
                                 *  - ChannelInboundHandlerAdapter：自定义handler
                                 */</span>
                                ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token comment">/*
                                     * 7、channelRead处理读事件
                                     */</span>
                                    <span class="token annotation punctuation">@Override</span>
                                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        <span class="token comment">/*
                                         * 8、接收到消息并处理，这里打印上一步转换好的字符串
                                         */</span>
                                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;收到的消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">/*
                 * 9、绑定监听端口并启动服务器
                 */</span>
                <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码解读" tabindex="-1"><a class="header-anchor" href="#代码解读"><span>代码解读</span></a></h4><ul><li>2处，创建 NioEventLoopGroup，可以简单理解为 线程池 + Selector 后面会详细展开</li><li>3处，选择服务 Scoket 实现类，其中 NioServerSocketChannel 表示基于 NIO 的服务器端实现，其它实现还有 <img src="`+m+`" alt="img.png"></li><li>4处，为啥方法叫 childHandler，是接下来添加的处理器都是给 SocketChannel 用的，而不是给 ServerSocketChannel。ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</li><li>6处，SocketChannel 的处理器，解码 ByteBuf =&gt; String</li><li>7处，SocketChannel 的业务处理器，使用上一个处理器的处理结果</li></ul><h3 id="_3、客户端" tabindex="-1"><a class="header-anchor" href="#_3、客户端"><span>3、客户端</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">Bootstrap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">ChannelInitializer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span></span><span class="token class-name">StringEncoder</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * netty客户端
 * <span class="token keyword">@author</span> kingsley
 * <span class="token keyword">@date</span> 2024/4/7 22:02
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloClient</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建客户端启动对象</span>
        <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 2、添加EventLoop</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 3、选择客户端channel实现类</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token comment">// 4、添加处理器</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 初始化channel，在连接成功之后调用</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 5、往pipeline链中添加一个handler处理器，这里使用 StringEncoder 将字符串编码成 ByteBuf</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token comment">// 6、启动客户端连接服务器，等待连接成功</span>
                <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span>
                <span class="token comment">// 7、阻塞方法，等待连接成功</span>
                <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 8、代表连接对象，可以理解为通道，通过该对象可以发送消息给服务器</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 9、向服务器发送数据</span>
                <span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token string">&quot;hello, netty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码解读-1" tabindex="-1"><a class="header-anchor" href="#代码解读-1"><span>代码解读</span></a></h4><ul><li>2处，创建 NioEventLoopGroup，同 Server</li><li>3处，选择客户端 Socket 实现类，NioSocketChannel 表示基于 NIO 的客户端实现，其它实现还有 <img src="`+v+'" alt="img.png"></li><li>4处，添加 SocketChannel 的处理器，ChannelInitializer 处理器（仅执行一次），它的作用是待客户端 SocketChannel 建立连接后，执行 initChannel 以便添加更多的处理器</li><li>5处，消息会经过通道 handler 处理，这里是将 String =&gt; ByteBuf 发出</li><li>6处，启动客户端连接服务器，等待连接成功</li><li>7处，Netty 中很多方法都是异步的，如 connect，这时需要使用 sync 方法等待 connect 建立连接完毕</li><li>8处，获取 channel 对象，它即为通道抽象，可以进行数据读写操作</li><li>9处，写入消息并清空缓冲区</li></ul><h3 id="_4、流程梳理" tabindex="-1"><a class="header-anchor" href="#_4、流程梳理"><span>4、流程梳理</span></a></h3><p><img src="'+b+`" alt="img.png"></p><p>💡 提示</p><blockquote><p><strong>一开始需要树立正确的观念</strong></p><ul><li>把 channel 理解为数据的通道</li><li>把 msg 理解为流动的数据，最开始输入是 ByteBuf，但经过 pipeline 的加工，会变成其它类型对象，最后输出又变成 ByteBuf</li><li>把 handler 理解为数据的处理工序</li></ul></blockquote><ul><li>工序有多道，合在一起就是 pipeline，pipeline 负责发布事件（读、读取完成...）传播给每个 handler， handler 对自己感兴趣的事件进行处理（重写了相应事件处理方法）</li></ul><blockquote><ul><li>handler 分 Inbound 和 Outbound 两类</li><li>把 eventLoop 理解为处理数据的工人</li></ul></blockquote><ul><li>工人可以管理多个 channel 的 IO 操作，并且一旦工人负责了某个 channel，就要负责到底（绑定），目的是为了线程安全。 <blockquote><p>总结起来就说是：<strong>一个 eventLoop 只负责一个 NioEventLoopGroup 中的一个线程，这个线程可以管理多个 channel，但一个 channel 只能由一个 eventLoop 管理</strong></p></blockquote></li></ul><blockquote><ul><li>工人既可以执行 IO 操作，也可以进行任务处理，每位工人有任务队列，队列里可以堆放多个 channel 的待处理任务，任务分为普通任务、定时任务</li></ul></blockquote><ul><li>工人按照 pipeline 顺序，依次按照 handler 的规划（代码）处理数据，可以为每道工序指定不同的工人</li></ul><h2 id="三、组件" tabindex="-1"><a class="header-anchor" href="#三、组件"><span>三、组件</span></a></h2><h3 id="_1、eventloop" tabindex="-1"><a class="header-anchor" href="#_1、eventloop"><span>1、EventLoop</span></a></h3><p>事件循环对象，本质是一个单线程执行器（同时维护了一个 Selector），里面有 run 方法处理 Channel 上源源不断的 IO 事件。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">OrderedEventExecutor</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Will handle all the I/O operations for a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> once registered.
 * One <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">EventLoop</span></span><span class="token punctuation">}</span> instance will usually handle more than one <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">}</span> but this may depend on
 * implementation details and internals.
 *
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;all&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventLoop</span> <span class="token keyword">extends</span> <span class="token class-name">OrderedEventExecutor</span><span class="token punctuation">,</span> <span class="token class-name">EventLoopGroup</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">EventLoopGroup</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的继承关系比较复杂</p><ul><li>一条线是继承自 java.util.concurrent.ScheduledExecutorService，因此包含了线程池中所有的方法</li><li>另一条线是继承自 netty 自己的 OrderedEventExecutor <ul><li>提供了 boolean inEventLoop(Thread thread) 方法判断一个线程是否属于此 EventLoop</li><li>提供了 parent 方法来看看自己属于哪个 EventLoopGroup</li></ul></li></ul><h3 id="_2、eventloopgroup" tabindex="-1"><a class="header-anchor" href="#_2、eventloopgroup"><span>2、EventLoopGroup</span></a></h3><p>事件循环组，是一组 EventLoop。Channel 一般会调用 EventLoopGroup 的 register 方法来绑定其中一个 EventLoop，后续这个 Channel 上的 IO 事件都由此 EventLoop 来处理（保证了 IO 事件处理时的线程安全）</p><ul><li>继承自 netty 自己的 EventExecutorGroup <ul><li>实现了 Iterable 接口提供遍历 EventLoop 的能力</li><li>另有 next 方法获取集合中下一个 EventLoop</li></ul></li></ul><p>以一个简单的实现为例：</p>`,39),C=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("kingsley"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("c2")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"EventLoopGroup")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioEventLoopGroup")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},"."),s("concurrent"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"EventExecutor")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("lombok"),n("span",{class:"token punctuation"},"."),s("extern"),n("span",{class:"token punctuation"},"."),s("slf4j"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Slf4j")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},"."),s("concurrent"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"TimeUnit")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * EventLoop测试
 *
 * `),n("span",{class:"token keyword"},"@author"),s(` kingsley
 * `),n("span",{class:"token keyword"},"@date"),s(` 2024/4/7 23:46
 */`)]),s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"TestEventLoop"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"InterruptedException"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},`/*
         * 1、创建事件循环组，这里设置2个线程，2个线程就是2个EventLoop
         * NioEventLoopGroup：可处理IO事件、普通任务、定时任务
         * DefaultEventLoopGroup：处理普通任务、定时任务
         */`),s(`
        `),n("span",{class:"token class-name"},"EventLoopGroup"),s(" group "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 2、获取下一个事件循环对象"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"EventLoop: {}"'),n("span",{class:"token punctuation"},","),s(" group"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"EventLoop: {}"'),n("span",{class:"token punctuation"},","),s(" group"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"EventLoop: {}"'),n("span",{class:"token punctuation"},","),s(" group"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"---------"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 也可以使用 for 循环"),s(`
        `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"EventExecutor"),s(" eventLoop "),n("span",{class:"token operator"},":"),s(" group"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"EventLoop: {}"'),n("span",{class:"token punctuation"},","),s(" eventLoop"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token comment"},"// 处理普通任务"),s(`
        group`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"execute"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
                `),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1000"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"InterruptedException"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                e`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"printStackTrace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token punctuation"},"}"),s(`
            log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"执行普通任务"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 处理定时任务"),s(`
        group`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"schedule"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
            log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"执行定时任务1"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeUnit"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MILLISECONDS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        group`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"next"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"schedule"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token punctuation"},"{"),s(`
            log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"执行定时任务2"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TimeUnit"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MILLISECONDS"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 阻塞主线程"),s(`
        `),n("span",{class:"token class-name"},"TimeUnit"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MILLISECONDS"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"200"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token comment"},"// 3、优雅的关闭"),s(`
        group`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shutdownGracefully"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"main"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.465 INFO  "),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` EventLoop: io.netty.channel.nio.NioEventLoop@28feb3fa
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.465 INFO  "),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` EventLoop: io.netty.channel.nio.NioEventLoop@675d3402
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.465 INFO  "),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` EventLoop: io.netty.channel.nio.NioEventLoop@28feb3fa
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.465 INFO  "),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` ---------
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.465 INFO  "),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` EventLoop: io.netty.channel.nio.NioEventLoop@28feb3fa
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.465 INFO  "),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` EventLoop: io.netty.channel.nio.NioEventLoop@675d3402
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.551 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-2-2"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` 执行定时任务1
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:05.741 INFO  "),n("span",{class:"token punctuation"},"["),s("main"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` main
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:06.545 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-2-1"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` 执行普通任务
`),n("span",{class:"token number"},"2024"),s("-04-08 00:09:06.546 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-2-1"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c2.TestEventLoop               "),n("span",{class:"token builtin class-name"},":"),s(` 执行定时任务2
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=o('<h4 id="💡-优雅关闭" tabindex="-1"><a class="header-anchor" href="#💡-优雅关闭"><span>💡 优雅关闭</span></a></h4><p>优雅关闭 shutdownGracefully 方法。该方法会首先切换 EventLoopGroup 到关闭状态从而拒绝新的任务的加入，然后在任务队列的任务都处理完成后，停止线程的运行。从而确保整体应用是在正常有序的状态下退出的</p><h4 id="nioeventloop-处理-io-事件" tabindex="-1"><a class="header-anchor" href="#nioeventloop-处理-io-事件"><span>NioEventLoop 处理 io 事件</span></a></h4><p>服务器端两个 nio worker 工人，配置四个客户端，通过命令行参数设置客户端ID，然后快速依次启动</p><p><img src="'+h+'" alt="img.png"><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202404172353544.png" alt=""></p>',5),S=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("kingsley"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("c3")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("bootstrap"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ServerBootstrap")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("buffer"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ByteBuf")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelHandlerContext")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelInboundHandlerAdapter")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelInitializer")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioEventLoopGroup")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("socket"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioServerSocketChannel")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("socket"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioSocketChannel")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("lombok"),n("span",{class:"token punctuation"},"."),s("extern"),n("span",{class:"token punctuation"},"."),s("slf4j"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Slf4j")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},"."),s("charset"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Charset")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@author"),s(` kingsley
 * `),n("span",{class:"token keyword"},"@date"),s(` 2024/4/17 22:43
 */`)]),s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"EventLoopServer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 主程序入口。
     * 使用ServerBootstrap启动一个服务器，配置使用NIO传输，绑定到8080端口。
     * 对每个新连接，使用ChannelInitializer初始化Channel，加入自定义的ChannelInboundHandlerAdapter以处理入站事件。
     */`),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ServerBootstrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 创建ServerBootstrap实例，用于启动服务器"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"group"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 指定使用NIO事件循环组"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioServerSocketChannel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 指定使用NIO服务器套接字通道"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"childHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ChannelInitializer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"NioSocketChannel"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 定义子通道（即每个新连接）的初始化处理器"),s(`
                    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                    `),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"initChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioSocketChannel"),s(" ch"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        ch`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pipeline"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ChannelInboundHandlerAdapter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 向通道处理链中添加自定义的入站事件处理器"),s(`
                            `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                            `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelRead"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),s(" msg"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 当有数据读取时"),s(`
                                `),n("span",{class:"token class-name"},"ByteBuf"),s(" buf "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ByteBuf"),n("span",{class:"token punctuation"},")"),s(" msg"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 将接收到的消息转换为ByteBuf类型"),s(`
                                log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"receive: {}"'),n("span",{class:"token punctuation"},","),s(" buf"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Charset"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultCharset"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 打印接收到的数据"),s(`
                            `),n("span",{class:"token punctuation"},"}"),s(`
                        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8080"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 绑定到8080端口并启动服务器"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("kingsley"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("c3")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("bootstrap"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Bootstrap")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Channel")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelInitializer")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioEventLoopGroup")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("socket"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioSocketChannel")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("handler"),n("span",{class:"token punctuation"},"."),s("codec"),n("span",{class:"token punctuation"},"."),s("string"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"StringEncoder")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("lombok"),n("span",{class:"token punctuation"},"."),s("extern"),n("span",{class:"token punctuation"},"."),s("slf4j"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Slf4j")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Arrays")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * netty客户端
 *
 * `),n("span",{class:"token keyword"},"@author"),s(` kingsley
 * `),n("span",{class:"token keyword"},"@date"),s(` 2024/4/7 22:02
 */`)]),s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"EventLoopClient"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"InterruptedException"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 1、创建客户端启动对象"),s(`
        `),n("span",{class:"token class-name"},"Channel"),s(" channel "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bootstrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 2、添加EventLoop"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"group"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 3、选择客户端channel实现类"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioSocketChannel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 4、添加处理器"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"handler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ChannelInitializer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"NioSocketChannel"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token comment"},"// 初始化channel，在连接成功之后调用"),s(`
                    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                    `),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"initChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioSocketChannel"),s(" ch"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        `),n("span",{class:"token comment"},"// 5、往pipeline链中添加一个handler处理器，这里使用 StringEncoder 将字符串编码成 ByteBuf"),s(`
                        ch`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pipeline"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"StringEncoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 6、启动客户端连接服务器，等待连接成功"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"connect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"127.0.0.1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8080"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 阻塞方法，等待连接成功"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sync"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token comment"},"// 代表连接对象"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"String"),s(" clientId "),n("span",{class:"token operator"},"="),s(" args"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
        log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"客户端连接成功，channel: {}, clientId: {}"'),n("span",{class:"token punctuation"},","),s(" channel"),n("span",{class:"token punctuation"},","),s(" clientId"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// 7、向服务器发送数据"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeAndFlush"),n("span",{class:"token punctuation"},"("),s("clientId "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'" ===> hello, netty1"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Thread"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10000"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        channel`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeAndFlush"),n("span",{class:"token punctuation"},"("),s("clientId "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"hello, netty2"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.875 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.util.Recycler                            "),n("span",{class:"token builtin class-name"},":"),s(" -Dio.netty.recycler.maxCapacityPerThread: "),n("span",{class:"token number"},"4096"),s(`
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.876 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.util.Recycler                            "),n("span",{class:"token builtin class-name"},":"),s(" -Dio.netty.recycler.maxSharedCapacityFactor: "),n("span",{class:"token number"},"2"),s(`
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.876 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.util.Recycler                            "),n("span",{class:"token builtin class-name"},":"),s(" -Dio.netty.recycler.linkCapacity: "),n("span",{class:"token number"},"16"),s(`
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.876 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.util.Recycler                            "),n("span",{class:"token builtin class-name"},":"),s(" -Dio.netty.recycler.ratio: "),n("span",{class:"token number"},"8"),s(`
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.876 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.util.Recycler                            "),n("span",{class:"token builtin class-name"},":"),s(" -Dio.netty.recycler.delayedQueue.ratio: "),n("span",{class:"token number"},"8"),s(`
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.889 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.buffer.AbstractByteBuf                   "),n("span",{class:"token builtin class-name"},":"),s(" -Dio.netty.buffer.checkAccessible: "),n("span",{class:"token boolean"},"true"),s(`
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.890 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.buffer.AbstractByteBuf                   "),n("span",{class:"token builtin class-name"},":"),s(" -Dio.netty.buffer.checkBounds: "),n("span",{class:"token boolean"},"true"),s(`
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.893 DEBUG "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" io.netty.util.ResourceLeakDetectorFactory         "),n("span",{class:"token builtin class-name"},":"),s(` Loaded default ResourceLeakDetector: io.netty.util.ResourceLeakDetector@452b789e
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:39.899 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client2 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty1
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:40.430 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-2"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client3 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty1
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:41.053 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client4 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty1
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:41.603 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-2"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client1 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty1
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:49.858 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client2 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty2
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:50.419 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-2"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client3 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty2
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:51.045 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-1"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client4 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty2
`),n("span",{class:"token number"},"2024"),s("-04-17 "),n("span",{class:"token number"},"23"),s(":55:51.599 INFO  "),n("span",{class:"token punctuation"},"["),s("nioEventLoopGroup-3-2"),n("span",{class:"token punctuation"},"]"),s(" com.kingsley.netty.c3.EventLoopServer             "),n("span",{class:"token builtin class-name"},":"),s(" receive: client1 "),n("span",{class:"token operator"},"=="),n("span",{class:"token operator"},"="),n("span",{class:"token operator"},">"),s(` hello, netty2
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=o(`<blockquote><ul><li>从前四个读事件日志可以看出，服务端依次使用 nioEventLoopGroup-3-1、nioEventLoopGroup-3-2 线程处理客户端的请求。证明一个线程(EventLoop) 可以处理多个客户端的请求，并且是通过轮询的方式获取线程(EventLoop)来处理客户端的请求</li><li>根据后四次读事件日志可以看出，对于同一个客户端连接通道，服务端使用相同的线程(EventLoop)处理请求</li></ul></blockquote><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202404180052346.png" alt=""></p><h4 id="❓上述服务端的代码是否存在问题呢" tabindex="-1"><a class="header-anchor" href="#❓上述服务端的代码是否存在问题呢"><span>❓上述服务端的代码是否存在问题呢？</span></a></h4><p>由于服务端的一个线程可能要处理多个客户端的请求，如果某一个客户端的请求处理时间过长，那么服务端线程就会阻塞，导致其他客户端的请求无法处理。这种情况下服务端的吞吐量就会因为一个客户端的影响而下降。</p><p>💡 解决方案</p><p>创建一个独立的 EventLoopGroup 专门处理业务逻辑</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kingsley<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>c3</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span></span><span class="token class-name">ServerBootstrap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span></span><span class="token class-name">ByteBuf</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioEventLoopGroup</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioServerSocketChannel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">NioSocketChannel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> kingsley
 * <span class="token keyword">@date</span> 2024/4/17 22:43
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventLoopServer2</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 主程序入口。
     * 使用ServerBootstrap启动一个服务器，配置使用NIO传输，绑定到8080端口。
     * 对每个新连接，使用ChannelInitializer初始化Channel，加入自定义的ChannelInboundHandlerAdapter以处理入站事件。
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个独立的 EventLoopGroup</span>
        <span class="token class-name">EventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token comment">// 使用 NioEventLoopGroup 处理</span>
                                <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token annotation punctuation">@Override</span>
                                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
                                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;receive: {}&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                        <span class="token comment">// 将消息传递到下一个 handler 处理，必须加这一行代码 ！！！ 否则在这就断了，不会将消息交给后续 handler 处理</span>
                                        ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                                <span class="token comment">// 使用 DefaultEventLoop 处理</span>
                                <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> <span class="token string">&quot;handler2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChannelInboundHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    <span class="token annotation punctuation">@Override</span>
                                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span> <span class="token comment">// 将接收到的消息转换为ByteBuf类型</span>
                                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;handler2 use defaultEventLoop process receive: {}&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先启动服务端，然后同时启动客户端1、客户端2，服务端输出：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">2024</span>-04-18 00:28:42.995 INFO  <span class="token punctuation">[</span>nioEventLoopGroup-4-1<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> receive: client2 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty1
<span class="token number">2024</span>-04-18 00:28:42.996 INFO  <span class="token punctuation">[</span>defaultEventLoopGroup-2-1<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> handler2 use defaultEventLoop process receive: client2 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty1
<span class="token number">2024</span>-04-18 00:28:43.585 INFO  <span class="token punctuation">[</span>nioEventLoopGroup-4-2<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> receive: client1 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty1
<span class="token number">2024</span>-04-18 00:28:43.586 INFO  <span class="token punctuation">[</span>defaultEventLoopGroup-2-2<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> handler2 use defaultEventLoop process receive: client1 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty1
<span class="token number">2024</span>-04-18 00:28:52.970 INFO  <span class="token punctuation">[</span>nioEventLoopGroup-4-1<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> receive: client2 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty2
<span class="token number">2024</span>-04-18 00:28:52.972 INFO  <span class="token punctuation">[</span>defaultEventLoopGroup-2-1<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> handler2 use defaultEventLoop process receive: client2 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty2
<span class="token number">2024</span>-04-18 00:28:53.580 INFO  <span class="token punctuation">[</span>nioEventLoopGroup-4-2<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> receive: client1 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty2
<span class="token number">2024</span>-04-18 00:28:53.583 INFO  <span class="token punctuation">[</span>defaultEventLoopGroup-2-2<span class="token punctuation">]</span> com.kingsley.netty.c3.EventLoopServer2            <span class="token builtin class-name">:</span> handler2 use defaultEventLoop process receive: client1 <span class="token operator">==</span><span class="token operator">=</span><span class="token operator">&gt;</span> hello, netty2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现第二个handler使用的是 defaultEventLoopGroup，并且也是轮询绑定机制</p><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202404180053271.png" alt=""></p><h4 id="💡-handler-执行中如何换线程-eventloopgroup-处理" tabindex="-1"><a class="header-anchor" href="#💡-handler-执行中如何换线程-eventloopgroup-处理"><span>💡 handler 执行中如何换线程（EventLoopGroup）处理？</span></a></h4><p>关键代码</p>`,13),I=o(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AbstractChannelHandlerContext</span> next<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Object</span> m <span class="token operator">=</span> next<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">touch</span><span class="token punctuation">(</span><span class="token class-name">ObjectUtil</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">EventExecutor</span> executor <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下一个 handler 的事件循环是否与当前的事件循环是同一个线程</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 是，直接调用</span>
        next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不是，将要执行的代码作为任务提交给下一个事件循环处理（换人）</span>
        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                next<span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果两个 handler 绑定的是同一个线程，那么就直接调用</li><li>否则，把要调用的代码封装为一个任务对象，由下一个 handler 的线程来调用</li></ul><h3 id="_3、channel" tabindex="-1"><a class="header-anchor" href="#_3、channel"><span>3、Channel</span></a></h3><p>channel 的主要作用</p><ul><li>close() 可以用来关闭 channel</li><li>closeFuture() 用来处理 channel 的关闭 <ul><li>sync 方法作用是同步等待 channel 关闭</li><li>而 addListener 方法是异步等待 channel 关闭</li></ul></li><li>pipeline() 方法添加处理器</li><li>write() 方法将数据写入</li><li>writeAndFlush() 方法将数据写入并刷出</li></ul><h4 id="channelfuture" tabindex="-1"><a class="header-anchor" href="#channelfuture"><span>ChannelFuture</span></a></h4><p>将之前的客户端代码拆开来看</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventLoopClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

        channelFuture<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: hello netty!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>1 处返回的是 ChannelFuture 对象，它的作用是利用 channel() 方法来获取 Channel 对象</p></blockquote><p><strong>注意</strong> connect 方法是异步的，意味着不等连接建立，方法执行就返回了。因此 channelFuture 对象中不能【立刻】获得到正确的 Channel 对象</p><p><strong>验证代码</strong></p>`,11),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ChannelFutureClient"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"ChannelFuture"),s(" channelFuture "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Bootstrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"group"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioSocketChannel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"handler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ChannelInitializer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Channel"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                    `),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"initChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Channel"),s(" ch"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        ch`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pipeline"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"StringEncoder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"connect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"127.0.0.1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8080"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("channelFuture"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 1"),s(`
        channelFuture`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"sync"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 2"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("channelFuture"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 3"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("kingsley"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("c3")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("bootstrap"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ServerBootstrap")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("buffer"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ByteBuf")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelHandlerContext")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelInboundHandlerAdapter")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ChannelInitializer")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioEventLoopGroup")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("socket"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioServerSocketChannel")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("io"),n("span",{class:"token punctuation"},"."),s("netty"),n("span",{class:"token punctuation"},"."),s("channel"),n("span",{class:"token punctuation"},"."),s("socket"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"NioSocketChannel")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("lombok"),n("span",{class:"token punctuation"},"."),s("extern"),n("span",{class:"token punctuation"},"."),s("slf4j"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Slf4j")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("nio"),n("span",{class:"token punctuation"},"."),s("charset"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Charset")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@author"),s(` kingsley
 * `),n("span",{class:"token keyword"},"@date"),s(` 2024/4/17 22:43
 */`)]),s(`
`),n("span",{class:"token annotation punctuation"},"@Slf4j"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"EventLoopServer"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 主程序入口。
     * 使用ServerBootstrap启动一个服务器，配置使用NIO传输，绑定到8080端口。
     * 对每个新连接，使用ChannelInitializer初始化Channel，加入自定义的ChannelInboundHandlerAdapter以处理入站事件。
     */`),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" args"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ServerBootstrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 创建ServerBootstrap实例，用于启动服务器"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"group"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"NioEventLoopGroup"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 指定使用NIO事件循环组"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"channel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioServerSocketChannel"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// 指定使用NIO服务器套接字通道"),s(`
                `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"childHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ChannelInitializer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"NioSocketChannel"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 定义子通道（即每个新连接）的初始化处理器"),s(`
                    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                    `),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"initChannel"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NioSocketChannel"),s(" ch"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
                        ch`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pipeline"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addLast"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ChannelInboundHandlerAdapter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 向通道处理链中添加自定义的入站事件处理器"),s(`
                            `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
                            `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"channelRead"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ChannelHandlerContext"),s(" ctx"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),s(" msg"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"// 当有数据读取时"),s(`
                                `),n("span",{class:"token class-name"},"ByteBuf"),s(" buf "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ByteBuf"),n("span",{class:"token punctuation"},")"),s(" msg"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 将接收到的消息转换为ByteBuf类型"),s(`
                                log`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"info"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"receive: {}"'),n("span",{class:"token punctuation"},","),s(" buf"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Charset"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"defaultCharset"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 打印接收到的数据"),s(`
                            `),n("span",{class:"token punctuation"},"}"),s(`
                        `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
                    `),n("span",{class:"token punctuation"},"}"),s(`
                `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"bind"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8080"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// 绑定到8080端口并启动服务器"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=o(`<p>客户端日志</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">2024</span>-04-19 00:07:32.827 INFO  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com.kingsley.netty.c4.ChannelFutureClient         <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>id: 0xc8b9a39e<span class="token punctuation">]</span>
<span class="token number">2024</span>-04-19 00:07:32.839 INFO  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com.kingsley.netty.c4.ChannelFutureClient         <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>id: 0xc8b9a39e, L:/127.0.0.1:52991 - R:/127.0.0.1:8080<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行到 1 时，连接未建立，打印 [id: 0xc8b9a39e]</li><li>执行到 2 时，sync 方法是同步等待连接建立完成</li><li>执行到 3 时，连接肯定建立了，打印 [id: 0xc8b9a39e, L:/127.0.0.1:52991 - R:/127.0.0.1:8080]</li></ul><p>除了可以用 sync 方法得到有效的Channel以外，还可以使用回调的方式</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> kingsley
 * <span class="token keyword">@date</span> 2024/4/18 23:55
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelFutureClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 1、同步阻塞方式获取Channel</span>
        <span class="token comment">// log.info(&quot;{}&quot;, channelFuture.channel()); // 1</span>
        <span class="token comment">// channelFuture.sync(); // 2</span>
        <span class="token comment">// log.info(&quot;{}&quot;, channelFuture.channel()); // 3</span>

        <span class="token comment">// 2、异步非阻塞方式获取Channel</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
        channelFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">)</span> future <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 1、获取到channel</span>
            <span class="token class-name">NioSocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">)</span> future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;addListener 获取的Channel：{}&quot;</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端日志输出</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">2024</span>-04-19 00:16:28.531 INFO  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> com.kingsley.netty.c4.ChannelFutureClient         <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>id: 0x2983cbbf<span class="token punctuation">]</span>
<span class="token number">2024</span>-04-19 00:16:28.612 INFO  <span class="token punctuation">[</span>nioEventLoopGroup-2-1<span class="token punctuation">]</span> com.kingsley.netty.c4.ChannelFutureClient         <span class="token builtin class-name">:</span> addListener 获取的Channel：<span class="token punctuation">[</span>id: 0x2983cbbf, L:/127.0.0.1:53256 - R:/127.0.0.1:8080<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>执行到 1 时，连接未建立，打印 [id: 0x2983cbbf]</li><li>ChannelFutureListener 会在连接建立时被调用（其中 operationComplete 方法），因此执行到 2 时，连接肯定建立了，打印 [id: 0x2983cbbf, L:/127.0.0.1:53256 - R:/127.0.0.1:8080]</li></ul><p>观察日志的logger部分可以发现：同步阻塞方式是在<strong>主线程</strong>中获取的Channel，异步非阻塞方式是在 <strong>nioEventLoopGroup-2-1</strong> 线程中获取的Channel。</p><h4 id="closefuture" tabindex="-1"><a class="header-anchor" href="#closefuture"><span>CloseFuture</span></a></h4><p>我们可以通过 ChannelFuture 来做一些资源释放操作，例如关闭 Channel、关闭 EventLoopGroup 等。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloseFutureClient</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">NioEventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ChannelFuture</span> channelFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token annotation punctuation">@Override</span> <span class="token comment">// 在连接建立后被调用</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> channelFuture<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;q&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// close 异步操作</span>
                    <span class="token comment">// log.debug(&quot;处理关闭之后的操作&quot;); // 不能在这里善后</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取 CloseFuture 对象， 1) 同步处理关闭， 2) 异步处理关闭</span>
        <span class="token class-name">ChannelFuture</span> closeFuture <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*log.debug(&quot;waiting close...&quot;);
        closeFuture.sync();
        log.debug(&quot;处理关闭之后的操作&quot;);*/</span>
        closeFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;处理关闭之后的操作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="💡-异步提升的是什么" tabindex="-1"><a class="header-anchor" href="#💡-异步提升的是什么"><span>💡 异步提升的是什么</span></a></h4><ul><li>看到这里可能会有疑问：为什么不在一个线程中去执行建立连接、关闭 channel，那样不是也可以吗？非要用这么复杂的异步方式：比如一个线程发起建立连接，另一个线程去真正建立连接</li><li>还有一种看法：netty 异步方式因为用了多线程效率就高。其实这种认识比较片面，多线程和异步所提升的效率并不是所认为的。</li></ul><p>思考下面的场景，4 个医生给人看病，每个病人花费 20 分钟，而且医生看病的过程中是以病人为单位的，一个病人看完了，才能看下一个病人。假设病人源源不断地来，可以计算一下 4 个医生一天工作 8 小时，处理的病人总数是： <span class="highlight">4 * 8 * (60 / 20) = 96</span></p><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202404190034608.png" alt="示意图"></p><p>经研究发现，看病可以细分为四个步骤，如下</p><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202404190036993.png" alt="四个步骤"></p><p>假设经拆分后每个步骤需要 5 分钟，可以做如下优化</p><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202404190040867.png" alt=""></p><p>只有一开始，医生 2、3、4 分别要等待 5、10、15 分钟才能执行工作，但只要后续病人源源不断地来，他们就能够满负荷工作，并且处理病人的能力提高到了<span class="highlight">4 * 8 * (60 / 5) = 384</span>，效率几乎是原来的四倍。</p><blockquote><p>这种方案并没有减少每位病人的看病时间，反而甚至有所增加。但对于整个流程（系统）而言提高了吞吐量，即单位时间内处理的事件数量</p></blockquote><p>要点</p><ul><li>单线程没法异步提高效率，必须配合多线程、多核 cpu 才能发挥异步的优势</li><li>异步并没有缩短响应时间，反而有所增加</li><li>合理进行任务拆分，也是利用异步的关键</li></ul><h3 id="_4、future-promise" tabindex="-1"><a class="header-anchor" href="#_4、future-promise"><span>4、Future &amp; Promise</span></a></h3><p>在异步处理时经常用到这两个接口，首先要说明 Netty 中的 Future 与 JDK 中的 Future 同名，但是是两个接口。Netty 的 Future 继承自 JDK 的 Future，而 Promise 又对 Netty Future 进行了扩展。</p><ul><li>JDK Future 只能同步等待任务结束（或成功、或失败）才能得到结果</li><li>Netty Future 可以同步等待任务结束得到结果，也可以异步方式得到结果，但都是要等任务结束</li><li>Netty Promise 不仅有 Netty Future 的功能，而且脱离了任务独立存在，只作为两个线程间传递结果的容器</li></ul><table><thead><tr><th>功能/名称</th><th>JDK Future</th><th>Netty Future</th><th>Promise</th></tr></thead><tbody><tr><td>cancel</td><td>取消任务</td><td>-</td><td>-</td></tr><tr><td>isCanceled</td><td>任务是否取消</td><td>-</td><td>-</td></tr><tr><td>isDone</td><td>任务是否完成，不能区分成功失败</td><td>-</td><td>-</td></tr><tr><td>get</td><td>获取任务结果，阻塞等待</td><td>-</td><td>-</td></tr><tr><td>getNow</td><td>-</td><td>获取任务结果，非阻塞，还未产生结果时返回 null</td><td>-</td></tr><tr><td>await</td><td>-</td><td>等待任务结束，如果任务失败，不会抛异常，而是通过 isSuccess 判断</td><td>-</td></tr><tr><td>sync</td><td>-</td><td>等待任务结束，如果任务失败，抛出异常</td><td>-</td></tr><tr><td>isSuccess</td><td>-</td><td>判断任务是否成功</td><td>-</td></tr><tr><td>cause</td><td>-</td><td>获取失败信息，非阻塞，如果没有失败，返回null</td><td>-</td></tr><tr><td>addListener</td><td>-</td><td>添加回调，异步接收结果</td><td>-</td></tr><tr><td>setSuccess</td><td>-</td><td>-</td><td>设置成功结果</td></tr><tr><td>setFailure</td><td>-</td><td>-</td><td>设置失败结果</td></tr></tbody></table><h4 id="例1" tabindex="-1"><a class="header-anchor" href="#例1"><span>例1</span></a></h4><p>同步处理任务成功</p>`,30);function B(O,q){const l=p("ExternalLinkIcon"),e=p("CodeGroupItem"),c=p("CodeGroup"),i=p("Badge");return k(),r("div",null,[g,n("p",null,[s("他还是另一个著名的高性能 Java 网络框架 "),n("a",f,[s("Mina"),a(l)]),s(" 的重要贡献者")]),w,a(c,null,{default:t(()=>[a(e,{title:"客户端"},{default:t(()=>[C]),_:1}),a(e,{title:"输出"},{default:t(()=>[E]),_:1})]),_:1}),L,a(c,null,{default:t(()=>[a(e,{title:"服务端"},{default:t(()=>[S]),_:1}),a(e,{title:"客户端"},{default:t(()=>[N]),_:1}),a(e,{title:"输出"},{default:t(()=>[x]),_:1})]),_:1}),_,a(i,{type:"warning",text:"io.netty.channel.AbstractChannelHandlerContext#invokeChannelRead()",vertical:"middle"}),I,a(c,null,{default:t(()=>[a(e,{title:"客户端"},{default:t(()=>[j]),_:1}),a(e,{title:"服务端"},{default:t(()=>[G]),_:1})]),_:1}),F])}const A=u(y,[["render",B],["__file","02-Netty入门.html.vue"]]),H=JSON.parse('{"path":"/back-end/netty/02-Netty%E5%85%A5%E9%97%A8.html","title":"Netty入门","lang":"zh-CN","frontmatter":{"author":"kingsley"},"headers":[{"level":2,"title":"一、概述","slug":"一、概述","link":"#一、概述","children":[{"level":3,"title":"1、Netty 是什么？","slug":"_1、netty-是什么","link":"#_1、netty-是什么","children":[]},{"level":3,"title":"2、Netty 的作者","slug":"_2、netty-的作者","link":"#_2、netty-的作者","children":[]},{"level":3,"title":"3、Netty 的地位","slug":"_3、netty-的地位","link":"#_3、netty-的地位","children":[]},{"level":3,"title":"4、Netty 的优势","slug":"_4、netty-的优势","link":"#_4、netty-的优势","children":[]}]},{"level":2,"title":"二、快速入门","slug":"二、快速入门","link":"#二、快速入门","children":[{"level":3,"title":"1、目标","slug":"_1、目标","link":"#_1、目标","children":[]},{"level":3,"title":"2、服务器端","slug":"_2、服务器端","link":"#_2、服务器端","children":[]},{"level":3,"title":"3、客户端","slug":"_3、客户端","link":"#_3、客户端","children":[]},{"level":3,"title":"4、流程梳理","slug":"_4、流程梳理","link":"#_4、流程梳理","children":[]}]},{"level":2,"title":"三、组件","slug":"三、组件","link":"#三、组件","children":[{"level":3,"title":"1、EventLoop","slug":"_1、eventloop","link":"#_1、eventloop","children":[]},{"level":3,"title":"2、EventLoopGroup","slug":"_2、eventloopgroup","link":"#_2、eventloopgroup","children":[]},{"level":3,"title":"3、Channel","slug":"_3、channel","link":"#_3、channel","children":[]},{"level":3,"title":"4、Future & Promise","slug":"_4、future-promise","link":"#_4、future-promise","children":[]}]}],"git":{"updatedTime":1713459469000},"filePathRelative":"back-end/netty/02-Netty入门.md"}');export{A as comp,H as data};
