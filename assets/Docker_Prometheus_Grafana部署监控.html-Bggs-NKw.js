import{_ as t,r,o as l,c as o,a,b as s,d as n,e as p}from"./app-C8q1F3U4.js";const i={},c=a("h1",{id:"基于prometheus-grafana搭建监控",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#基于prometheus-grafana搭建监控"},[a("span",null,"基于Prometheus+Grafana搭建监控")])],-1),u=a("h2",{id:"一、prometheus",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#一、prometheus"},[a("span",null,"一、Prometheus")])],-1),d={href:"https://prometheus.io/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/prometheus",target:"_blank",rel:"noopener noreferrer"},m=p(`<p>Prometheus 是一个开源的系统监控和报警系统，在 2012 年由 SoundCloud 公司创建，并于 2015 年正式发布。 2016 年，Prometheus 正式加入 CNCF (Cloud Native Computing Foundation)，成为继kubernetes之后第二个在CNCF托管的项目, 现已广泛用于在容器和微服务领域中得到了广泛的应用，当然不仅限于此Prometheus 本身基于Go语言开发的一套开源的系统监控报警框架和时序列数据库(TSDB)。</p><p>Prometheus 的监控功能很完善和全面，性能也足够支撑上万台规模的集群。</p><h3 id="_1、prometheus基本原理" tabindex="-1"><a class="header-anchor" href="#_1、prometheus基本原理"><span>1、Prometheus基本原理</span></a></h3><p>Prometheus的基本原理是通过HTTP协议周期性抓取被监控组件的状态，任意组件只要提供对应的HTTP接口就可以接入监控。 不需要任何SDK或者其他的集成过程。这样做非常适合做虚拟化环境监控系统，比如VM、Docker、Kubernetes等。输出被监控组件信息的HTTP接口被叫做exporter。 目前互联网公司常用的组件大部分都有exporter可以直接使用，比如Varnish、Haproxy、Nginx、MySQL、Linux系统信息(包括磁盘、内存、CPU、网络等等)。</p><p>其大概的工作流程是：</p><ol><li>Prometheus server 定期从配置好的 jobs 或者 exporters 中拉 metrics，或者接收来自 Pushgateway 发过来的 metrics，或者从其他的 Prometheus server 中拉 metrics。</li><li>Prometheus server 在本地存储收集到的 metrics，并运行已定义好的 alert.rules，记录新的时间序列或者向 Alertmanager 推送警报。</li><li>Alertmanager 根据配置文件，对接收到的警报进行处理，发出告警。</li><li>在Grafana图形界面中，可视化查看采集数据。</li></ol><h3 id="_2、prometheus特性" tabindex="-1"><a class="header-anchor" href="#_2、prometheus特性"><span>2、Prometheus特性</span></a></h3><ul><li>多维度数据模型</li><li>灵活的查询语言。</li><li>不依赖分布式存储，单个服务器节点是自主的。</li><li>通过基于HTTP的pull方式采集时序数据。</li><li>可以通过中间网关进行时序列数据推送。</li><li>通过服务发现或者静态配置来发现目标服务对象。</li><li>支持多种多样的图表和界面展示，比如Grafana等。</li></ul><h3 id="_3、prometheus架构" tabindex="-1"><a class="header-anchor" href="#_3、prometheus架构"><span>3、Prometheus架构</span></a></h3><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202406081541186.png" alt="Prometheus架构图"></p><ul><li>Prometheus server是Prometheus架构中的核心组件，基于go语言编写而成，无第三方依赖关系，可以独立部署在物理服务器上、云主机、Docker容器内。主要用于收集每个目标数据，并存储为时间序列数据，对外可提供数据查询支持和告警规则配置管理。</li><li>Prometheus服务器可以对监控目标进行静态配置管理或者动态配置管理，它将监控采集到的数据按照时间序列存储在本地磁盘的时序数据库中（当然也支持远程存储），自身对外提供了自定义的PromQL语言，可以对数据进行查询和分析</li><li>Client Library是用于检测应用程序代码的客户端库。在监控服务之前，需要向客户端库代码添加检测实现Prometheus中metric的类型。</li><li>Exporter（数据采集）用于输出被监控组件信息的HTTP接口统称为Exporter（导出器）。目前互联网公司常用的组件大部分都有Expoter供直接使用，比如Nginx、MySQL、linux系统信息等。</li><li>Pushgateway是指用于支持短期临时或批量计划任务工作的汇聚节点。主要用于短期的job，此类存在的job时间较短，可能在Prometheus来pull之前就自动消失了。所以针对这类job，设计成可以直接向Pushgateway推送metric，这样Prometheus服务器端便可以定时去Pushgateway拉去metric</li><li>Pushgateway是prometheus的一个组件，prometheus server默认是通过exporter主动获取数据（默认采取pull拉取数据），pushgateway则是通过被动方式推送数据到prometheus server，用户可以写一些自定义的监控脚本把需要监控的数据发送给pushgateway， 然后pushgateway再把数据发送给Prometheus server</li><li>总结就是pushgateway是普罗米修斯的一个组件，是通过被动的方式将数据上传至普罗米修斯。这个可以解决不在一个网段的问题</li><li>Alertmanager主要用于处理Prometheus服务器端发送的alerts信息，对其去除重数据、分组并路由到正确的接收方式，发出告警，支持丰富的告警方式。</li><li>Service Discovery：动态发现待监控的target，从而完成监控配置的重要组件，在容器环境中尤为重要，该组件目前由Prometheus Server内建支持</li></ul><p><strong>Prometheus服务发现</strong></p><p>由于 Prometheus 是通过 Pull 的方式主动获取监控数据，也就是每隔几秒钟去各个target采集一次metric，所以需要手工指定监控节点的列表。<br> 当监控节点增多之后，每次增加节点都需要更改配置文件，尽管可以使用接口热更新配置文件，但仍然非常麻烦，这个时候就需要通过服务发现（service discovery，SD）机制去解决。<br> Prometheus 支持多种服务发现机制，可以自动获取要收集的 targets，包含的服务发现机制包括：azure、consul、dns、ec2、openstack、file、gce、kubernetes、marathon、triton、zookeeper（nerve、serverset），配置方法可以参考手册的配置页面。 可以说 SD 机制是非常丰富的，但目前由于开发资源有限，已经不再开发新的 SD 机制，只对基于文件的 SD 机制进行维护。</p><h3 id="_4、基于docker部署prometheus" tabindex="-1"><a class="header-anchor" href="#_4、基于docker部署prometheus"><span>4、基于Docker部署Prometheus</span></a></h3><h4 id="拉取docker镜像" tabindex="-1"><a class="header-anchor" href="#拉取docker镜像"><span>拉取docker镜像</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull bitnami/prometheus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建配置文件及目录" tabindex="-1"><a class="header-anchor" href="#创建配置文件及目录"><span>创建配置文件及目录</span></a></h4><p>/home/docker/prometheus/prometheus.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">global</span><span class="token punctuation">:</span>
 <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     15s <span class="token comment"># 设置采集指标间隔 15秒。默认是1分钟</span>
 <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment"># 触发告警间隔15秒。默认一分钟</span>
 <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span>      10s  <span class="token comment"># 指标采集超时时间 10秒</span>
 
<span class="token key atrule">rule_files</span><span class="token punctuation">:</span>
  <span class="token comment"># - &quot;first_rules.yml&quot;</span>
 
<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token comment"># The job name is added as a label</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> prometheus
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:9090&#39;</span><span class="token punctuation">]</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">instance</span><span class="token punctuation">:</span> centos8
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> grafana
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:9100&#39;</span><span class="token punctuation">]</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">instance</span><span class="token punctuation">:</span> centos8
 
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> mabo
    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> <span class="token string">&#39;/actuator/prometheus&#39;</span><span class="token comment">#这里要指定path，默认是/metrics,路径不存在</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:9091&#39;</span><span class="token punctuation">]</span>
 
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>node<span class="token punctuation">-</span>exporter
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
       <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;192.168.1.23:9100&#39;</span><span class="token punctuation">]</span> <span class="token comment">#这里要用宿主机的ip，localhost或127.0.0.1都不行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器"><span>启动容器</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run  <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9090</span>:9090 <span class="token parameter variable">-v</span> /home/docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml <span class="token parameter variable">-v</span> /home/docker/prometheus:/etc/prometheus <span class="token parameter variable">--name</span> prometheus bitnami/prometheus:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问"><span>访问</span></a></h4><p>访问地址：http://192.168.1.23:9090/</p><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202406081617218.png" alt=""></p><h2 id="二、部署grafana" tabindex="-1"><a class="header-anchor" href="#二、部署grafana"><span>二、部署Grafana</span></a></h2><h3 id="_1、grafana简介" tabindex="-1"><a class="header-anchor" href="#_1、grafana简介"><span>1、Grafana简介</span></a></h3><h3 id="_2、grafana部署" tabindex="-1"><a class="header-anchor" href="#_2、grafana部署"><span>2、Grafana部署</span></a></h3><h4 id="拉取docker镜像-1" tabindex="-1"><a class="header-anchor" href="#拉取docker镜像-1"><span>拉取docker镜像</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull grafana/grafana
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建数据存储目录并设置写权限" tabindex="-1"><a class="header-anchor" href="#创建数据存储目录并设置写权限"><span>创建数据存储目录并设置写权限</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /home/docker/grafana/grafana-storage
<span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /home/docker/grafana/grafana-storage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动容器-1" tabindex="-1"><a class="header-anchor" href="#启动容器-1"><span>启动容器</span></a></h4><p>这里设置本地端口是10000，访问地址是 http://192.168.1.23:10000/</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">10000</span>:3000 <span class="token parameter variable">-v</span> /home/docker/grafana/grafana-storage:/var/lib/grafana <span class="token parameter variable">--name</span> grafana grafana/grafana:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="访问地址" tabindex="-1"><a class="header-anchor" href="#访问地址"><span>访问地址</span></a></h3><p>http://192.168.1.23:10000/</p><p><img src="https://cdn.jsdelivr.net/gh/taozhang1029/static-repository@master/img/202406081625598.png" alt=""></p>`,37);function k(v,g){const e=r("ExternalLinkIcon");return l(),o("div",null,[c,u,a("p",null,[a("a",d,[s("官方网站"),n(e)])]),a("p",null,[a("a",h,[s("Github"),n(e)])]),m])}const f=t(i,[["render",k],["__file","Docker_Prometheus_Grafana部署监控.html.vue"]]),_=JSON.parse('{"path":"/env/Docker_Prometheus_Grafana%E9%83%A8%E7%BD%B2%E7%9B%91%E6%8E%A7.html","title":"Prometheus+Grafana搭建监控","lang":"zh-CN","frontmatter":{"title":"Prometheus+Grafana搭建监控","categories":["环境搭建"],"tags":["Docker","Prometheus","Grafana","监控"]},"headers":[{"level":2,"title":"一、Prometheus","slug":"一、prometheus","link":"#一、prometheus","children":[{"level":3,"title":"1、Prometheus基本原理","slug":"_1、prometheus基本原理","link":"#_1、prometheus基本原理","children":[]},{"level":3,"title":"2、Prometheus特性","slug":"_2、prometheus特性","link":"#_2、prometheus特性","children":[]},{"level":3,"title":"3、Prometheus架构","slug":"_3、prometheus架构","link":"#_3、prometheus架构","children":[]},{"level":3,"title":"4、基于Docker部署Prometheus","slug":"_4、基于docker部署prometheus","link":"#_4、基于docker部署prometheus","children":[]}]},{"level":2,"title":"二、部署Grafana","slug":"二、部署grafana","link":"#二、部署grafana","children":[{"level":3,"title":"1、Grafana简介","slug":"_1、grafana简介","link":"#_1、grafana简介","children":[]},{"level":3,"title":"2、Grafana部署","slug":"_2、grafana部署","link":"#_2、grafana部署","children":[]},{"level":3,"title":"访问地址","slug":"访问地址","link":"#访问地址","children":[]}]}],"git":{"updatedTime":null},"filePathRelative":"env/Docker+Prometheus+Grafana部署监控.md"}');export{f as comp,_ as data};
